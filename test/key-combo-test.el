(require 'ert)
(require 'el-spec)
(require 'el-spy)

(require 'key-combo)
(key-combo-load-default)

(defun test1 ()
  (interactive)
  (message "test1")
  )

(defun test2 ()
  (interactive)
  (message "test2")
  )

(defun test3 ()
  (interactive)
  (message "test3")
  )

(defun key-combo-test-helper-execute (cmd)
  (key-combo-mode 1)
  (execute-kbd-macro (key-combo-read-kbd-macro cmd))
  (substring-no-properties (buffer-string)))

(defun key-combo-test-helper-define-lookup (cmd)
  (key-combo-define-global ">>" cmd)
  (key-combo-key-binding ">>"))

(defun key-combo-test-helper-binding-execute (cmd)
  (key-combo-command-execute (key-combo-key-binding cmd))
  (substring-no-properties (buffer-string)))

(dont-compile
  (when (fboundp 'describe)
    (describe ("key-combo in temp-buffer" :vars ((mode)))
      (shared-examples "check pre-command-hook"
        (it ()
          (key-combo-mode 1)
          (should (memq 'key-combo-pre-command-function pre-command-hook)))
        (it ()
          (key-combo-mode -1)
          (should-not (memq 'key-combo-pre-command-function pre-command-hook))))
      (shared-examples "C-a"
        (before
          (insert "B\n IP")
          (key-combo-mode 1))
        (it ()
          (should (key-combo-key-binding (kbd "C-a C-a"))))
        ;; (it ()
        ;;   (key-combo-mode -1)
        ;;   (should-not (key-combo-key-binding (kbd "C-a C-a"))))
        (it ()
          (key-combo-test-helper-execute "C-a")
          (should (equal (char-to-string (following-char)) "I")))
        (it ()
          (key-combo-test-helper-execute "C-a C-a")
          (should (equal (char-to-string (following-char)) " ")))
        (it ()
          (key-combo-test-helper-execute "C-a C-a C-a")
          (should (equal (char-to-string (following-char)) "B")))
        (it ()
          (should (memq 'key-combo-pre-command-function pre-command-hook))
          (key-combo-test-helper-execute "C-a C-p")
          (should (memq 'key-combo-pre-command-function pre-command-hook)))
        ;; fail in temp buffer?
        ;; (it (:vars ((cmd "C-a C-a C-a C-a")))
        ;;   (backward-char)
        ;;   (should (equal (char-to-string (following-char)) "P")))
        )

      (around
        (setq key-combo-command-keys nil)
        (with-temp-buffer
          (switch-to-buffer (current-buffer))
          (let ((key-combo-prefix-mode-map (make-sparse-keymap))
                (key-combo-prefix-mode-map-alist nil)
                ;; (key-combo-mode-map
                ;;  (copy-keymap key-combo-mode-map))
                (global-map-org (current-global-map))
                (global-map
                 (let ((map (make-sparse-keymap)))
                   (set-keymap-parent map (current-global-map))
                   map)))
            (unwind-protect
                (progn
                  (use-global-map global-map)
                  (funcall el-spec:example))
              (use-global-map global-map-org)))))

      (it ()
        (should (eq key-combo-mode nil)))
      (it "is key-combo element"
        (should (key-combo-elementp ">"))
        (should (key-combo-elementp '(lambda()())))
        (should (key-combo-elementp 'nil))
        (should (key-combo-elementp 'self-insert-command)))
      (it "is not key-combo element"
        (should-not (key-combo-elementp '(">")))
        (should-not (key-combo-elementp '((lambda()()))))
        (should-not (key-combo-elementp '(nil)))
        (should-not (key-combo-elementp '(self-insert-command)))
        (should-not (key-combo-elementp 'wrong-command)))
      (it "can define & lookup"
        (should (key-combo-test-helper-define-lookup '(lambda()())))
        (should (key-combo-test-helper-define-lookup ">"))
        (should (key-combo-test-helper-define-lookup 'self-insert-command))
        (should (key-combo-test-helper-define-lookup '((lambda()()))))
        (should (key-combo-test-helper-define-lookup '(">")))
        (should (key-combo-test-helper-define-lookup '(self-insert-command)))
        (should (key-combo-test-helper-define-lookup '(">" ">")))
        (should (key-combo-test-helper-define-lookup '(">" (lambda()()))))
        (should (key-combo-test-helper-define-lookup '((lambda()()) ">")))
        (should
         (key-combo-test-helper-define-lookup '((lambda()()) (lambda()()))))
        (should
         (key-combo-test-helper-define-lookup '(">" self-insert-command)))
        (should
         (key-combo-test-helper-define-lookup '(self-insert-command ">")))
        (should
         (key-combo-test-helper-define-lookup
          '(self-insert-command self-insert-command)))
        )
      (include-examples "check pre-command-hook")
      (include-examples "C-a")

      (context "in default-mode"
        (context "with mock"
          (when (require 'el-mock nil t)
            (context "prefix"
              (it ()
                ;; no error
                (with-el-spy
                  (defmock test3 () (interactive))
                  (global-set-key (kbd "M-s z") 'test3)
                  (execute-kbd-macro (kbd "M-s z"))
                  (should (eq (el-spy:called-count 'test3) 1))
                  ))
              (it ()
                ;; no error
                (with-el-spy
                  (should (keymapp (key-binding (kbd "M-s"))));; prefix
                  (defmock test1 () (interactive))
                  (defmock test2 () (interactive))
                  ;; (global-set-key (kbd "M-s") 'hoge);workaround
                  (key-combo-define-global (kbd "M-s") 'test1)
                  (key-combo-define-global (kbd "M-s a") 'test2)
                  (execute-kbd-macro (kbd "M-s a"))
                  (should (eq (el-spy:called-count 'test1) 1))
                  (should (eq (el-spy:called-count 'test2) 1))
                  ))
              (it ()
                ;; no error
                (with-el-spy
                  (should (keymapp (key-binding (kbd "M-s"))));; prefix
                  (defmock test1 () (interactive))
                  (defmock test2 () (interactive))
                  (key-combo-define-global (kbd "a") 'test1)
                  (key-combo-define-global (kbd "a M-s") 'test2)
                  (execute-kbd-macro (kbd "a M-s"))
                  (should (eq (el-spy:called-count 'test1) 1))
                  (should (eq (el-spy:called-count 'test2) 1))
                  ))
              (it ()
                ;; no error
                (with-el-spy
                  (should-not (keymapp (key-binding (kbd "M-a"))));; prefix
                  (defmock test1 () (interactive))
                  (defmock test2 () (interactive))
                  (key-combo-define-global (kbd "M-a") 'test1)
                  (key-combo-define-global (kbd "M-a a") 'test2)
                  (execute-kbd-macro (kbd "M-a a"))
                  (should (eq (el-spy:called-count 'test1) 1))
                  (should (eq (el-spy:called-count 'test2) 1))
                  ))
              (it ()
                ;; no error
                (with-el-spy
                  (defmock test1 () (interactive))
                  (defmock test2 () (interactive))
                  (key-combo-define-global (kbd "M-a") 'test1)
                  (key-combo-define-global (kbd "M-a M-a") 'test2)
                  (execute-kbd-macro (kbd "M-a M-a"))
                  (should (eq (el-spy:called-count 'test1) 1))
                  (should (eq (el-spy:called-count 'test2) 1))
                  ))
              (it ()
                (with-el-spy
                  (defmock define-key (keymap key def))
                  (key-combo-define-global (kbd "aa") 'test1)
                  (should (eq (el-spy:called-count 'define-key) 2))
                  (should (equal (mapcar '(lambda (x) (cdr x))
                                         (el-spy:args-for-call 'define-key))
                                 '(([key-combo _a]
                                    key-combo-execute-original)
                                   ([key-combo _a\ a]
                                    test1))))
                  ))
              (it ()
                (with-el-spy
                  (should (keymapp (key-binding (kbd "M-s"))));; prefix
                  (defmock define-key (keymap key def)
                           (funcall (el-spy:get-original-func 'define-key)
                                    keymap key def))
                  (defmock test1 () (interactive))
                  (key-combo-define-global (kbd "M-s a") 'test1)
                  ;; (should (eq (el-spy:called-count 'define-key) 2))
                  (should (equal (mapcar '(lambda (x) (cdr x))
                                         (el-spy:args-for-call 'define-key))
                                 '(([134217843]
                                    key-combo-execute-original)
                                   ([key-combo _M-s]
                                    key-combo-execute-original)
                                   ([key-combo _M-s\ a]
                                    test1))))
                  (should (eq (lookup-key global-map [key-combo _M-s])
                              'key-combo-execute-original))
                  (should (eq (el-spy:called-count 'test1) 0))
                  (execute-kbd-macro (kbd "M-s a"))
                  (should (eq (el-spy:called-count 'test1) 1))
                  ))
              )
            (it ()
              (should-error
               (with-mock
                 (mock (test1 *) :times 1)
                 (key-combo-define-global (kbd "M-C-d") '(test1 test2)))))
            (it ()
              ;; no error
              (with-el-spy
                (defmock test1 () (interactive))
                (defmock test2 () (interactive))
                (key-combo-mode 1)
                (key-combo-define-global (kbd "M-C-d") 'test1)
                (execute-kbd-macro (kbd "M-C-d"))
                ;; (should (eq (el-spy:called-count 'test1) 1))
                ))
            (it ()
              ;; no error
              (with-el-spy
                (defmock test1 () (interactive))
                (defmock test2 () (interactive))
                (key-combo-mode 1)
                (key-combo-define-global (kbd "M-C-d") '(test1 test2))
                (execute-kbd-macro (kbd "M-C-d"))
                ;; (should (eq (el-spy:called-count 'test1) 1))
                ))
            (it ()
              ;; no error
              (with-el-spy
                (defmock test1 () (interactive))
                (defmock test2 () (interactive))
                (key-combo-mode 1)
                (key-combo-define-global (kbd "M-C-d") '(test1 test2))
                (execute-kbd-macro (kbd "M-C-d M-C-d"))
                (should (eq (el-spy:called-count 'test1) 1))
                (should (eq (el-spy:called-count 'test2) 1))
                ))
            (it ()
              ;; no error
              (with-el-spy
                (defmock define-key (keymap key def) 0)
                (use-local-map (make-sparse-keymap))
                (key-combo-define-local "a" "a")
                (should (eq (el-spy:called-count 'define-key) 1))))
            (it ()
              ;; no error
              (with-el-spy
                (defmock define-key (keymap key def) 0)
                ;; (mock (define-key * * *) :times 1)
                (use-local-map (make-sparse-keymap))
                (key-combo-define-local "a" '("a"))
                (should (eq (el-spy:called-count 'define-key) 1))))
            (it ()
              ;; no error
              (with-el-spy
                (defmock define-key (keymap key def) 0)
                (use-local-map (make-sparse-keymap))
                ;; (mock (define-key * * *) :times 3);; 1 for recursive call?
                (key-combo-define-local "a" '("a" "b"))
                (should (eq (el-spy:called-count 'define-key) 2))))
            (it ()
              ;; no error
              (with-el-spy
                (defmock define-key (keymap key def) 0)
                (defmock lookup-key (keymap key) t)
                (use-local-map (make-sparse-keymap))
                ;; (mock (lookup-key * *) => t :times 2)
                ;; (mock (define-key * * *) :times 2);; 1 for recursive call?
                (key-combo-define-local "a" '("a" "b"))
                (should (eq (el-spy:called-count 'define-key) 2))
                (should (eq (el-spy:called-count 'lookup-key) 4))
                )))
          )
        (context "execute"
          (it ()
            (should (string= (key-combo-test-helper-execute ">") ">")))
          (it ()
            (should (string= (key-combo-test-helper-execute "=") "="))))
        (context "no execute"
          (it ()
            (key-combo-command-execute (lambda () (insert "a")))
            (should (string= (buffer-string) "a")))
          (it ()
            (should-error (key-combo-command-execute 'wrong-command)))
          (it ()
            (let ((last-command-event ?b))
              (key-combo-command-execute 'self-insert-command))
            (should (string= (buffer-string) "b")))
          (it ()
            (key-combo-command-execute (key-combo-get-command "a"))
            (should (string= (buffer-string) "a")))
          (it ()
            (key-combo-command-execute (key-combo-get-command "a`!!'a"))
            (should (string= (buffer-string) "aa"))
            (should (eq (point) 2)))
          (it ()
            (buffer-enable-undo)
            (let ((key-combo-undo-list))
              (key-combo-command-execute (lambda() (insert "a")))
              (key-combo-undo))
            (should (string= (buffer-string) "")))
          (it ()
            (buffer-enable-undo)
            (let ((key-combo-undo-list))
              (key-combo-command-execute (key-combo-get-command "a`!!'a"))
              (key-combo-undo))
            (should (string= (buffer-string) "")))
          (it ()
            (should-error (key-combo-define-global "a" 'wrong-command)))
          (it ()
            (should (key-combo-define-global "a" 'self-insert-command)))
          (it ()
            (should (eq (key-combo-define-global "a" nil) nil)))
          (it ()
            (should (eq (key-combo-define-global (kbd "C-M-g") nil) nil)))))
      (context "in emacs-lisp-mode"
        (before
          (emacs-lisp-mode))
        (it ()
          (key-combo-define-global (kbd "M-s") "a"))
        (it ()
          (should-not (key-combo-comment-or-stringp)))
        (it ()
          (insert "\"")
          (should (key-combo-comment-or-stringp)))
        (it ()
          (insert ";")
          (should (key-combo-comment-or-stringp)))
        (it ()
          (insert ";\n")
          (should-not (key-combo-comment-or-stringp)))
        (context "isearch-mode"
          (it ()
            (insert "=")
            (should (string= (buffer-string) "="))
            (should (eq (point) 2)))
          (it ()
            (insert "=");; not to raise error from isearch-search
            (isearch-mode nil);; backward search
            (execute-kbd-macro "=")
            (should (string= (buffer-string) "="))
            (should (eq (point) 1))))
        (context "execute only"
          (it ()
            (should (string= (key-combo-test-helper-execute "=") "= ")))
          (it ()
            (should (string= (key-combo-test-helper-execute "==") "eq ")))
          (it ()
            (should (string= (key-combo-test-helper-execute ",") ",")))
          (it ()
            (should (string= (key-combo-test-helper-execute ",,") ",,")))
          (it ()
            (should (string= (key-combo-test-helper-execute ".") ".")))
          (it ()
            (should (string= (key-combo-test-helper-execute ". SPC") " . ")))
          (it ()
            (should (string= (key-combo-test-helper-execute ";") ";; ")))
          (it ()
            (should (string= (key-combo-test-helper-execute ";.") ";; .")))
          (it ()
            (should (string= (key-combo-test-helper-execute ";,") ";; ,")))
          (it ()
            (insert ";")
            (should (string= (key-combo-test-helper-execute "=") ";=")))
          )
        (context "in skk-mode"
          (when (require 'skk-autoloads nil t)
            (before
              (skk-mode 1)
              (setq this-command 'skk-insert)
              (insert ";")
              )
            (it ()
              (should (string= (key-combo-test-helper-execute ",") ";、")))
            (it ()
              (should (string= (key-combo-test-helper-execute ".") ";。")))
            )
          )
        (context ("insert & move & execute" :vars (pos pre-string))
          (it ()
            (insert "\"")
            (should (string= (key-combo-test-helper-execute "=") "\"=")))
          (it ()
            (insert ";")
            (should (string= (key-combo-test-helper-execute "=") ";=")))
          (it ()
            (insert ";")
            (should (string= (key-combo-test-helper-execute ",") ";,")))
          (it ()
            (insert ";\n")
            (should (string= (key-combo-test-helper-execute ";") ";\n;; ")))
          (it ()
            (insert ";")
            (should (string= (key-combo-test-helper-execute ".") ";.")))
          (it ()
            (insert "\"\"\n")
            (goto-char 3)
            (should (string= (key-combo-test-helper-execute ".") "\"\".\n")))
          (it ()
            (insert "\"\"a")
            (goto-char 3)
            (should (string= (key-combo-test-helper-execute ".") "\"\".a")))
          (it ()
            (insert "\"\"")
            (goto-char 3)
            (should (string= (key-combo-test-helper-execute ".") "\"\".")))
          (it ()
            (insert "\"\"")
            (goto-char 2)
            (should (string= (key-combo-test-helper-execute ".") "\".\"")))
          (it ()
            (insert "a\"\"")
            (goto-char 2)
            (should (string= (key-combo-test-helper-execute ".") "a.\"\"")))
          )
        (include-examples "C-a")
        (include-examples "check pre-command-hook"))
      (context "in ruby"
        (before
          (key-combo-mode 1)
          (ruby-mode)
          (when (boundp 'auto-complete-mode)
            (auto-complete-mode -1)))
        ;; bug?for auto-complete completion
        (it ()
          (should (string= (key-combo-test-helper-execute ".") ".")))
        (it ()
          (should (string= (key-combo-test-helper-execute "..") "..")))
        (it ()
          (should (string= (key-combo-test-helper-execute "...") "...")))
        (it ()
          (should (string= (key-combo-test-helper-execute "!~") " !~ ")))
        (it ()
          (should (string= (key-combo-test-helper-execute "**") "**")))
        (it ()
          (should (string= (key-combo-test-helper-execute "||=") " ||= "))))
      (context "in c-mode"
        (before
          ;; (key-combo-mode 1)
          (c-mode))
        (context "execute+"
          (it ()
            (should (string= (key-combo-test-helper-execute "+") " + ")))
          (it ()
            (should (string= (key-combo-test-helper-execute "++") "++")))
          ;; (it ()
          ;;   (should (string= (key-description "+") "+")))
          (it ()
            (should (equal (listify-key-sequence "+") '(43))))
          (it ()
            (should (string= (key-description '(?+)) "+")))
          (it ()
            (should (equal (key-combo-make-key-vector '(?+))
                           ;;(vector 'key-combo (intern (key-description )))
                           [key-combo _+])))
          (it ("a")
            (should (not (null (key-binding
                                (key-combo-make-key-vector '(?+))
                                )))))
          (it ("c")
            (should (not (null (lookup-key
                                (current-local-map)
                                (key-combo-make-key-vector '(?+))
                                )))))
          (it ("b")
            (should (not (equal (key-binding
                                 (key-combo-make-key-vector '(?+)))
                                'key-combo-execute-original))))
          (it ()
            (should (not (null (key-combo-get-command "+")))))
          (it ()
            (should (not (equal (key-combo-get-command "+")
                                'key-combo-execute-original))))
          (it ("d")
            (key-combo-define-local "a" nil)
            ;; (key-combo-key-binding "a")
            ;; (key-binding (vector 'key-combo (intern (key-description "a"))))
            ;; accept-default bug?
            (should (eq (lookup-key (current-local-map)
                                    (key-combo-make-key-vector '(?a)))
                        nil))
            (key-combo-define-local "a" "a")
            (should (not (equal (lookup-key (current-local-map)
                                            (key-combo-make-key-vector '(?a)))
                                nil)))
            (key-combo-define-local "a" nil)
            )
          )
        (context "undo"
          (before
            (buffer-enable-undo))
          (it ()
            (should (string= (key-combo-test-helper-execute "=") " = ")))
          (it ()
            (should (string= (key-combo-test-helper-execute "=") " = "))
            (undo)
            (should (string= (buffer-string) "="))
            )
          (it ()
            (should (string= (key-combo-test-helper-execute "= C-x u") "=")))
          (it ()
            (should (string= (key-combo-test-helper-execute "== C-x u") " = ")))
          )
        (context "execute"
          (it ()
            (should (string= (key-combo-test-helper-execute "=") " = ")))
          (it ()
            (should (string= (key-combo-test-helper-execute "=*") " =* ")))
          (it ()
            (should (string= (key-combo-test-helper-execute "==") " == ")))
          (it ()
            (should (string= (key-combo-test-helper-execute "===") " === ")))
          (it "loop"
            (should (string= (key-combo-test-helper-execute "====") " = ")))
          (it ()
            (should (string= (key-combo-test-helper-execute "=>=") " => = ")))
          ;; (it ()
          ;; (should (string= (key-combo-test-helper-execute "==!") " ==! ")))
          (it ()
            (should (string= (key-combo-test-helper-execute "=>") " => ")))
          (it ()
            (should (string= (key-combo-test-helper-execute "/") "/")))
          (it ()
            (should (string= (key-combo-test-helper-execute "/ SPC") " / ")))
          (it ()
            (should (string= (key-combo-test-helper-execute "*") "*")))
          (it ()
            (should (string= (key-combo-test-helper-execute "**") "**")))
          (it ()
            (should (string= (key-combo-test-helper-execute "->") "->")))
          (it ()
            (should (string= (key-combo-test-helper-execute ".") ".")))
          ;; todo check position
          (it ()
            (should (string= (key-combo-test-helper-execute "/* RET")
                             "/*\n  \n */")))
          ;; todo depend on indent width
          ;; (it ()
          ;; (should (string= (key-combo-test-helper-execute "{ RET") "{\n  \n}"))
          )
        (context "funcall"
          ;; (before
          ;;   (key-combo-command-execute (key-combo-key-binding lookup-cmd)))
          (it ()
            (should (string=
                     (key-combo-test-helper-binding-execute "=") " = ")))
          (it ()
            (should (string=
                     (key-combo-test-helper-binding-execute "==") " == ")))
          (it ()
            (should (string=
                     (key-combo-test-helper-binding-execute [?=]) " = ")))
          (it ()
            (should (string=
                     (key-combo-test-helper-binding-execute [?= ?=]) " == ")))
          (it ()
            (should (string=
                     (key-combo-test-helper-binding-execute [?= ?>]) " => ")))
          (it ()
            (should (string=
                     (key-combo-test-helper-binding-execute [?= ?= ?=])
                     " === ")))
          ;; (it ()
          ;;   (funcall (key-combo-key-binding [?= ?= ?= ?=]))
          ;;   (should (string= (buffer-string) " ==== ")))
          (it ()
            (key-combo-define-global (kbd "C-M-h") " == ")
            (key-combo-command-execute (key-combo-key-binding (kbd "C-M-h")))
            (should (equal (buffer-string) " == ")))
          (it ()
            (should-not
             (equal
              (key-combo-lookup-key (current-global-map) (kbd "C-M-h"))
              " == ")))
          ;; (it ()
          ;;   (key-combo-define-global (kbd "C-M-h C-M-h") " === ")
          ;;   (execute-kbd-macro (kbd "C-M-h C-M-h"))
          ;;   (should (string= (buffer-string) " === "))
          ;;   )
          (it ()
            (key-combo-define-global (kbd "C-M-h C-M-h") " === ")
            (key-combo-command-execute
             (key-combo-key-binding (kbd "C-M-h C-M-h")))
            (should (string= (buffer-string) " === "))
            )
          (it ()
            (should-not (key-combo-key-binding [?= ?= ?= ?=])))
          (it ()
            (insert "a  ")
            (should (string= (key-combo-test-helper-execute "=") "a  = "))
            (should (string= (buffer-string) "a  = ")))
          )
        )
      )
    ))

;; (defun key-combo-prefix-command ()
;;   (interactive)
;;   (message "key-combo-pre")
;;   )

;; (global-set-key (kbd "M-s b") 'test3)
;; (execute-kbd-macro (kbd "M-s b"))

;; (defun key-combo-unread-command (cmd)
;;   (interactive)
;;     (setq unread-command-events
;;           (append unread-command-events (listify-key-sequence cmd)))
;;   )

;; (progn
;;   (key-combo-mode -1)
;;   (key-combo-unread-command (kbd "M-s"))
;;   (key-combo-unread-command (kbd "b"))
;;   (key-combo-mode 1)
;;   )

;; (define-key key-combo-mode-map
;;   (kbd "M-s") 'key-combo-prefix-command)

;; (define-key key-combo-mode-map
;;   (kbd "M-s") nil)

;; (define-key global-map
;;   (key-combo-make-key-vector (kbd "M-s")) 'test1)

;; (define-key global-map
;;   (key-combo-make-key-vector (kbd "M-s a")) 'test2)

;; key-combo-mode-map

;; (key-combo-define-global (kbd "M-s a") 'test1)

